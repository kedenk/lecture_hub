/**
 * WebDev Practical Project Server API
 * WebDev Practical Project Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: maximilian.altmeyer@dfki.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Body } from '../model/body';
import { InlineResponse200 } from '../model/inlineResponse200';
import { Mood } from '../model/mood';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


@Injectable()
export class MoodService {

    protected basePath = 'http://localhost:5300';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns the moods over all lectures
     * 
     */
    public getMood(): Observable<Array<Mood>> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/mood`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Returns the moods for a lecture
     * 
     * @param lectureID lectureID of corresponding lecture
     */
    public getMoodByLectureID(lectureID: number): Observable<Mood> {
        if (lectureID === null || lectureID === undefined) {
            throw new Error('Required parameter lectureID was null or undefined when calling getMoodByLectureID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/mood/byLecture/${encodeURIComponent(String(lectureID))}`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Get student&#39;s mood for a lecture
     * Return a student&#39;s current mood for a lecture. If there is no mood set, the neutral one is returned
     * @param lectureID lectureID of corresponding lecture
     * @param studentID studentID of the corresponding student
     */
    public getMoodForStudentByLecture(lectureID: number, studentID: number): Observable<InlineResponse200> {
        if (lectureID === null || lectureID === undefined) {
            throw new Error('Required parameter lectureID was null or undefined when calling getMoodForStudentByLecture.');
        }
        if (studentID === null || studentID === undefined) {
            throw new Error('Required parameter studentID was null or undefined when calling getMoodForStudentByLecture.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/mood/byLecture/${encodeURIComponent(String(lectureID))}/byStudent/${encodeURIComponent(String(studentID))}`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Update/Post an existing student&#39;s mood for a given lecture
     * 
     * @param lectureID lectureID of corresponding lecture
     * @param body The new mood for the lecture and the studentID 
     */
    public postMoodForLecture(lectureID: number, body: Body): Observable<Mood> {
        if (lectureID === null || lectureID === undefined) {
            throw new Error('Required parameter lectureID was null or undefined when calling postMoodForLecture.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postMoodForLecture.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/mood/byLecture/${encodeURIComponent(String(lectureID))}`,
            body,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

}
