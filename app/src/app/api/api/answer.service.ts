/**
 * WebDev Practical Project Server API
 * WebDev Practical Project Server API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: maximilian.altmeyer@dfki.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Answer } from '../model/answer';
import { Body4 } from '../model/body4';
import { Body5 } from '../model/body5';
import { Body6 } from '../model/body6';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


@Injectable()
export class AnswerService {

    protected basePath = 'http://localhost:5300';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new answer for a given question
     * 
     * @param questionID questionID of the question in which the answer should be posted
     * @param body The textContent of the new answer and the author (studentID) of the answer
     */
    public addAnswer(questionID: number, body: Body6): Observable<Answer> {
        if (questionID === null || questionID === undefined) {
            throw new Error('Required parameter questionID was null or undefined when calling addAnswer.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addAnswer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/answer/byQuestion/${encodeURIComponent(String(questionID))}`,
            body,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Returns all answers in the system
     * 
     * @param studentID studentID of the student that requests the answers
     */
    public getAnswers(studentID: number): Observable<Array<Answer>> {
        if (studentID === null || studentID === undefined) {
            throw new Error('Required parameter studentID was null or undefined when calling getAnswers.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (studentID !== undefined) {
            queryParameters = queryParameters.set('studentID', <any>studentID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/answer`,
            {
                params: queryParameters,
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Find answer by answerID
     * Returns answer for a answerID
     * @param answerID answerID of corresponding answer
     * @param studentID studentID of the student that requests the answers
     */
    public getAnswersByAnswerID(answerID: number, studentID: number): Observable<Answer> {
        if (answerID === null || answerID === undefined) {
            throw new Error('Required parameter answerID was null or undefined when calling getAnswersByAnswerID.');
        }
        if (studentID === null || studentID === undefined) {
            throw new Error('Required parameter studentID was null or undefined when calling getAnswersByAnswerID.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (studentID !== undefined) {
            queryParameters = queryParameters.set('studentID', <any>studentID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/answer/${encodeURIComponent(String(answerID))}`,
            {
                params: queryParameters,
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Find answers by lectureID
     * Returns all answers for a lecture
     * @param lectureID lectureID of corresponding lecture
     * @param studentID studentID of the student that requests the answers
     */
    public getAnswersByLectureID(lectureID: number, studentID: number): Observable<Array<Answer>> {
        if (lectureID === null || lectureID === undefined) {
            throw new Error('Required parameter lectureID was null or undefined when calling getAnswersByLectureID.');
        }
        if (studentID === null || studentID === undefined) {
            throw new Error('Required parameter studentID was null or undefined when calling getAnswersByLectureID.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (studentID !== undefined) {
            queryParameters = queryParameters.set('studentID', <any>studentID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/answer/byLecture/${encodeURIComponent(String(lectureID))}`,
            {
                params: queryParameters,
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Find answers by questionID
     * Returns all answers for a question
     * @param questionID questionID of corresponding question
     * @param studentID studentID of the student that requests the answers
     */
    public getAnswersByQuestionID(questionID: number, studentID: number): Observable<Array<Answer>> {
        if (questionID === null || questionID === undefined) {
            throw new Error('Required parameter questionID was null or undefined when calling getAnswersByQuestionID.');
        }
        if (studentID === null || studentID === undefined) {
            throw new Error('Required parameter studentID was null or undefined when calling getAnswersByQuestionID.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (studentID !== undefined) {
            queryParameters = queryParameters.set('studentID', <any>studentID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/answer/byQuestion/${encodeURIComponent(String(questionID))}`,
            {
                params: queryParameters,
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Update an answer
     * 
     * @param answerID answerID of corresponding answer
     * @param body The new textContent of the answer and the studentID to check if it matches the author of the answer
     */
    public updateAnswer(answerID: number, body: Body4): Observable<Answer> {
        if (answerID === null || answerID === undefined) {
            throw new Error('Required parameter answerID was null or undefined when calling updateAnswer.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAnswer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/answer/${encodeURIComponent(String(answerID))}`,
            body,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Vote for an answer. NOTE that voting is only possible once per user and question/answer!
     * 
     * @param answerID answerID of corresponding answer
     * @param body The vote (-1 or 1) for a . NOTE that voting is only possible once per user and question/answer!
     */
    public voteAnswer(answerID: number, body: Body5): Observable<Answer> {
        if (answerID === null || answerID === undefined) {
            throw new Error('Required parameter answerID was null or undefined when calling voteAnswer.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling voteAnswer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/answer/vote/${encodeURIComponent(String(answerID))}`,
            body,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

}
